
LED_STRUCT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000196  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ea  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b10  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000941  00000000  00000000  00000dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d4  00000000  00000000  00001705  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  00001adc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041e  00000000  00000000  00001b64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000197  00000000  00000000  00001f82  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00002119  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	4c d0       	rcall	.+152    	; 0x132 <main>
  9a:	7b c0       	rjmp	.+246    	; 0x192 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <ledInit>:
 *  Author: USER
 */ 
#include "led.h"

void ledInit(LED *led) // 습관적으로 초기화 함수를 만들자
{
  9e:	dc 01       	movw	r26, r24
	PORT 주소에서 -1을 하면 DDR로 이동할 수 있음
	*/
	// 포트에 해당되는 핀을 출력으로 설정
	// DDRx = DDRx | (1<<0); 와 동일 의미 (led.pin = 0이라 가정)
	// DDRx의 0000 0001 이 출력으로 설정 됨
	*(led->port -1) |= (1 << led->pin);
  a0:	ed 91       	ld	r30, X+
  a2:	fc 91       	ld	r31, X
  a4:	11 97       	sbiw	r26, 0x01	; 1
  a6:	42 91       	ld	r20, -Z
  a8:	21 e0       	ldi	r18, 0x01	; 1
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	c9 01       	movw	r24, r18
  ae:	12 96       	adiw	r26, 0x02	; 2
  b0:	0c 90       	ld	r0, X
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <ledInit+0x1a>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	0a 94       	dec	r0
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <ledInit+0x16>
  bc:	84 2b       	or	r24, r20
  be:	80 83       	st	Z, r24
  c0:	08 95       	ret

000000c2 <ledSet>:
}

void ledSet(LED *led)
{
  c2:	dc 01       	movw	r26, r24
	*(led->port -1) |= (1 << led->pin);
  c4:	ed 91       	ld	r30, X+
  c6:	fc 91       	ld	r31, X
  c8:	11 97       	sbiw	r26, 0x01	; 1
  ca:	42 91       	ld	r20, -Z
  cc:	21 e0       	ldi	r18, 0x01	; 1
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	c9 01       	movw	r24, r18
  d2:	12 96       	adiw	r26, 0x02	; 2
  d4:	0c 90       	ld	r0, X
  d6:	02 c0       	rjmp	.+4      	; 0xdc <ledSet+0x1a>
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	0a 94       	dec	r0
  de:	e2 f7       	brpl	.-8      	; 0xd8 <ledSet+0x16>
  e0:	84 2b       	or	r24, r20
  e2:	80 83       	st	Z, r24
  e4:	08 95       	ret

000000e6 <ledOn>:
}

void ledOn(LED *led)
{
  e6:	dc 01       	movw	r26, r24
	*(led->port) |= (1 << led->pin);
  e8:	ed 91       	ld	r30, X+
  ea:	fc 91       	ld	r31, X
  ec:	11 97       	sbiw	r26, 0x01	; 1
  ee:	40 81       	ld	r20, Z
  f0:	21 e0       	ldi	r18, 0x01	; 1
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	c9 01       	movw	r24, r18
  f6:	12 96       	adiw	r26, 0x02	; 2
  f8:	0c 90       	ld	r0, X
  fa:	02 c0       	rjmp	.+4      	; 0x100 <ledOn+0x1a>
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	0a 94       	dec	r0
 102:	e2 f7       	brpl	.-8      	; 0xfc <ledOn+0x16>
 104:	84 2b       	or	r24, r20
 106:	80 83       	st	Z, r24
 108:	08 95       	ret

0000010a <ledOff>:
void ledOff(LED *led)
{
	// 내가 원하는 위치에 0을 넣고 싶을 때 : & ~(1 << led->pin)
	// *(led->port) = *(led->port) & ~(1 << led->pin)
	// ~(1 << 0)이라 하면 ~(0000 0001) -> 1111 1110이 됨 그럼 원하는 위치에 0을 넣을 수 있게됨
	*(led->port) &= ~(1 << led->pin);
 10a:	dc 01       	movw	r26, r24
 10c:	ed 91       	ld	r30, X+
 10e:	fc 91       	ld	r31, X
 110:	11 97       	sbiw	r26, 0x01	; 1
 112:	40 81       	ld	r20, Z
 114:	21 e0       	ldi	r18, 0x01	; 1
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	b9 01       	movw	r22, r18
 11a:	12 96       	adiw	r26, 0x02	; 2
 11c:	0c 90       	ld	r0, X
 11e:	02 c0       	rjmp	.+4      	; 0x124 <ledOff+0x1a>
 120:	66 0f       	add	r22, r22
 122:	77 1f       	adc	r23, r23
 124:	0a 94       	dec	r0
 126:	e2 f7       	brpl	.-8      	; 0x120 <ledOff+0x16>
 128:	cb 01       	movw	r24, r22
 12a:	80 95       	com	r24
 12c:	84 23       	and	r24, r20
 12e:	80 83       	st	Z, r24
 130:	08 95       	ret

00000132 <main>:
#include <util/delay.h>

#include "led.h"

int main(void)
{
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	00 d0       	rcall	.+0      	; 0x138 <main+0x6>
 138:	1f 92       	push	r1
 13a:	cd b7       	in	r28, 0x3d	; 61
 13c:	de b7       	in	r29, 0x3e	; 62
    LED led;
	led.port = &PORTD; // PORTD의 주소값을 구조체에 있는 포인터 멤버에 대입
 13e:	82 e3       	ldi	r24, 0x32	; 50
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	9a 83       	std	Y+2, r25	; 0x02
 144:	89 83       	std	Y+1, r24	; 0x01
	led.pin = 0;
 146:	1b 82       	std	Y+3, r1	; 0x03
	ledInit(&led);
 148:	ce 01       	movw	r24, r28
 14a:	01 96       	adiw	r24, 0x01	; 1
 14c:	a8 df       	rcall	.-176    	; 0x9e <ledInit>
	
    while (1)
    {
		for(uint8_t i=0; i<8; i++)
 14e:	10 e0       	ldi	r17, 0x00	; 0
 150:	1d c0       	rjmp	.+58     	; 0x18c <main+0x5a>
		{
			led.pin = i;
 152:	1b 83       	std	Y+3, r17	; 0x03
			ledSet(&led);
 154:	ce 01       	movw	r24, r28
 156:	01 96       	adiw	r24, 0x01	; 1
 158:	b4 df       	rcall	.-152    	; 0xc2 <ledSet>
			ledOn(&led);
 15a:	ce 01       	movw	r24, r28
 15c:	01 96       	adiw	r24, 0x01	; 1
 15e:	c3 df       	rcall	.-122    	; 0xe6 <ledOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 160:	2f ef       	ldi	r18, 0xFF	; 255
 162:	85 ea       	ldi	r24, 0xA5	; 165
 164:	9e e0       	ldi	r25, 0x0E	; 14
 166:	21 50       	subi	r18, 0x01	; 1
 168:	80 40       	sbci	r24, 0x00	; 0
 16a:	90 40       	sbci	r25, 0x00	; 0
 16c:	e1 f7       	brne	.-8      	; 0x166 <main+0x34>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <main+0x3e>
			_delay_ms(300);
			ledOff(&led);
 170:	00 00       	nop
 172:	ce 01       	movw	r24, r28
 174:	01 96       	adiw	r24, 0x01	; 1
 176:	c9 df       	rcall	.-110    	; 0x10a <ledOff>
 178:	2f ef       	ldi	r18, 0xFF	; 255
 17a:	85 ea       	ldi	r24, 0xA5	; 165
 17c:	9e e0       	ldi	r25, 0x0E	; 14
 17e:	21 50       	subi	r18, 0x01	; 1
 180:	80 40       	sbci	r24, 0x00	; 0
 182:	90 40       	sbci	r25, 0x00	; 0
 184:	e1 f7       	brne	.-8      	; 0x17e <main+0x4c>
 186:	00 c0       	rjmp	.+0      	; 0x188 <main+0x56>
 188:	00 00       	nop
	led.pin = 0;
	ledInit(&led);
	
    while (1)
    {
		for(uint8_t i=0; i<8; i++)
 18a:	1f 5f       	subi	r17, 0xFF	; 255
 18c:	18 30       	cpi	r17, 0x08	; 8
 18e:	08 f3       	brcs	.-62     	; 0x152 <main+0x20>
 190:	de cf       	rjmp	.-68     	; 0x14e <main+0x1c>

00000192 <_exit>:
 192:	f8 94       	cli

00000194 <__stop_program>:
 194:	ff cf       	rjmp	.-2      	; 0x194 <__stop_program>
